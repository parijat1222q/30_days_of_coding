Given an array nums of size n, return the majority element.
The majority element is the element that appears more than âŒŠn / 2âŒ‹ times. You may assume that the majority element always exists in the array.


class Solution:
    def majorityElement(self, nums):
        candidate = None
        count = 0

        for num in nums:
            if count == 0:
                candidate = num
            count += 1 if num == candidate else -1

        return candidate





You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.
Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.


class Solution(object):
    def findMissingAndRepeatedValues(self, grid):
        n = len(grid)
        nums = [grid[i][j] for i in range(n) for j in range(n)]
        sum_grid = sum(nums)
        sum_squares_grid = sum(x * x for x in nums)
        
        total_sum = (n * n * (n * n + 1)) // 2
        total_sum_squares = (n * n * (n * n + 1) * (2 * n * n + 1)) // 6
        
        diff_sum = total_sum - sum_grid  
        diff_squares = total_sum_squares - sum_squares_grid  
        sum_ab = diff_squares // diff_sum
        
        a = (sum_ab - diff_sum) // 2
        b = a + diff_sum





You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.


class Solution(object):
    def merge(self, nums1, m, nums2, n):
        
        i = m - 1  
        j = n - 1  
        k = m + n - 1  
        
        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1
        while j >= 0:
            nums1[k] = nums2[j]
            j -= 1
            k -= 1
        
        return [a, b]
        
